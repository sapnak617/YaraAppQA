"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidUiautomator2Driver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _uiautomator = require("./uiautomator2");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _appiumAdb = require("appium-adb");

var _helpers = _interopRequireDefault(require("./helpers"));

var _appiumAndroidDriver = require("appium-android-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _portscanner = require("portscanner");

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

const helpers = Object.assign({}, _helpers.default, _appiumAndroidDriver.androidHelpers);
const DEVICE_PORT_RANGE = [8200, 8299];

const DEVICE_PORT_ALLOCATION_GUARD = _appiumSupport.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'uia2_device_port_guard'), {
  timeout: 25,
  tryRecovery: true
});

const DEVICE_PORT = 6790;
const MJPEG_SERVER_DEVICE_PORT = 7810;
const NO_PROXY = [['GET', new RegExp('^/session/(?!.*/)')], ['GET', new RegExp('^/session/[^/]+/alert_[^/]+')], ['GET', new RegExp('^/session/[^/]+/alert/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_activity')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_package')], ['GET', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/device/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/settings')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/attribute')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/displayed')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/enabled')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/location_in_view')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/name')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/selected')], ['GET', new RegExp('^/session/[^/]+/ime/[^/]+')], ['GET', new RegExp('^/session/[^/]+/location')], ['GET', new RegExp('^/session/[^/]+/log/types')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['GET', new RegExp('^/session/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/timeouts')], ['GET', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/[^/]+_alert$')], ['POST', new RegExp('^/session/[^/]+/actions')], ['POST', new RegExp('^/session/[^/]+/alert/[^/]+')], ['POST', new RegExp('^/session/[^/]+/app/[^/]')], ['POST', new RegExp('^/session/[^/]+/appium/[^/]+/start_activity')], ['POST', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/compare_images')], ['POST', new RegExp('^/session/[^/]+/appium/device/(?!set_clipboard)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/replace_value')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/value')], ['POST', new RegExp('^/session/[^/]+/appium/getPerformanceData')], ['POST', new RegExp('^/session/[^/]+/appium/performanceData/types')], ['POST', new RegExp('^/session/[^/]+/appium/settings')], ['POST', new RegExp('^/session/[^/]+/appium/execute_driver')], ['POST', new RegExp('^/session/[^/]+/appium/start_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/stop_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/.*event')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/element')], ['POST', new RegExp('^/session/[^/]+/ime/[^/]+')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/timeouts')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute_async')], ['GET', new RegExp('^/session/[^/]+/window/rect')], ['POST', new RegExp('^/session/[^/]+/execute/async')], ['POST', new RegExp('^/session/[^/]+/execute/sync')]];
const CHROME_NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/rect')], ['GET', new RegExp('^/session/[^/]+/log/types$')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/log$')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/execute$')], ['POST', new RegExp('^/session/[^/]+/execute/sync')]];
const APK_EXTENSION = '.apk';
const APKS_EXTENSION = '.apks';
const MEMOIZED_FUNCTIONS = ['getStatusBarHeight', 'getDevicePixelRatio'];

class AndroidUiautomator2Driver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.uiautomator2 = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false,
      allowInvisibleElements: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.sessionChromedrivers = {};

    for (const fn of MEMOIZED_FUNCTIONS) {
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }

  validateDesiredCaps(caps) {
    return super.validateDesiredCaps(caps) && _appiumAndroidDriver.androidHelpers.validateDesiredCaps(caps);
  }

  async createSession(...args) {
    try {
      let [sessionId, caps] = await super.createSession(...args);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: true,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: true,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);
      this.curContext = this.defaultContextName();
      let defaultOpts = {
        fullReset: false,
        autoLaunch: true,
        adbPort: _appiumAdb.DEFAULT_ADB_PORT,
        androidInstallTimeout: 90000
      };

      _lodash.default.defaults(this.opts, defaultOpts);

      if (this.isChromeSession) {
        _logger.default.info("We're going to run a Chrome-based session");

        let {
          pkg,
          activity
        } = helpers.getChromePkg(this.opts.browserName);
        this.opts.appPackage = this.caps.appPackage = pkg;
        this.opts.appActivity = this.caps.appActivity = activity;

        _logger.default.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
      }

      if (this.opts.reboot) {
        this.setAvdFromCapabilities(caps);
      }

      if (this.opts.app) {
        this.opts.app = await this.helpers.configureApp(this.opts.app, [APK_EXTENSION, APKS_EXTENSION]);
        await this.checkAppPresent();
      } else if (this.opts.appPackage) {
        _logger.default.info(`Starting '${this.opts.appPackage}' directly on the device`);
      } else {
        _logger.default.info(`Neither 'app' nor 'appPackage' was set. Starting UiAutomator2 ` + 'without the target application');
      }

      this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
      await this.startUiAutomator2Session();
      await this.fillDeviceDetails();

      if (this.opts.mjpegScreenshotUrl) {
        _logger.default.info(`Starting MJPEG stream reading URL: '${this.opts.mjpegScreenshotUrl}'`);

        this.mjpegStream = new _appiumSupport.mjpeg.MJpegStream(this.opts.mjpegScreenshotUrl);
        await this.mjpegStream.start();
      }

      return [sessionId, this.caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async fillDeviceDetails() {
    this.caps.pixelRatio = await this.getDevicePixelRatio();
    this.caps.statBarHeight = await this.getStatusBarHeight();
    this.caps.viewportRect = await this.getViewPortRect();
  }

  get driverData() {
    return {};
  }

  async getSession() {
    let sessionData = await super.getSession();

    _logger.default.debug('Getting session details from server to mix in');

    let uia2Data = await this.uiautomator2.jwproxy.command('/', 'GET', {});
    return Object.assign({}, sessionData, uia2Data);
  }

  isEmulator() {
    return helpers.isEmulator(this.adb, this.opts);
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  async allocateSystemPort() {
    await DEVICE_PORT_ALLOCATION_GUARD(async () => {
      const [startPort, endPort] = DEVICE_PORT_RANGE;

      try {
        this.opts.systemPort = this.opts.systemPort || (await (0, _portscanner.findAPortNotInUse)(startPort, endPort));
      } catch (e) {
        _logger.default.errorAndThrow(`Cannot find any free port in range ${startPort}..${endPort}}. ` + `Please set the available port number by providing the systemPort capability or ` + `double check the processes that are locking ports within this range and terminate ` + `these which are not needed anymore`);
      }

      _logger.default.debug(`Forwarding UiAutomator2 Server port ${DEVICE_PORT} to ${this.opts.systemPort}`);

      await this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT);
    });
  }

  async releaseSystemPort() {
    if (this.opts.systemPort) {
      await DEVICE_PORT_ALLOCATION_GUARD(async () => await this.adb.removePortForward(this.opts.systemPort));
    }
  }

  async allocateMjpegServerPort() {
    if (this.opts.mjpegServerPort) {
      await this.adb.forwardPort(this.opts.mjpegServerPort, MJPEG_SERVER_DEVICE_PORT);
    }
  }

  async releaseMjpegServerPort() {
    if (this.opts.mjpegServerPort) {
      await this.adb.removePortForward(this.opts.mjpegServerPort);
    }
  }

  async startUiAutomator2Session() {
    let {
      udid,
      emPort
    } = await helpers.getDeviceInfoFromCaps(this.opts);
    this.opts.udid = udid;
    this.opts.emPort = emPort;
    this.adb = await _appiumAndroidDriver.androidHelpers.createADB(this.opts);
    const apiLevel = await this.adb.getApiLevel();

    if (apiLevel < 21) {
      _logger.default.errorAndThrow('UIAutomator2 is only supported since Android 5.0 (Lollipop). ' + 'You could still use other supported backends in order to automate older Android versions.');
    }

    if (apiLevel >= 28) {
      _logger.default.info('Relaxing hidden api policy');

      await this.adb.setHiddenApiPolicy('1', !!this.opts.ignoreHiddenApiPolicyError);
    }

    if (_appiumSupport.util.hasValue(this.opts.gpsEnabled)) {
      if (this.isEmulator()) {
        _logger.default.info(`Trying to ${this.opts.gpsEnabled ? 'enable' : 'disable'} gps location provider`);

        await this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled);
      } else {
        _logger.default.warn(`Sorry! 'gpsEnabled' capability is only available for emulators`);
      }
    }

    const appInfo = await helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, appInfo || {});
    this.caps.deviceName = this.adb.curDeviceId;
    this.caps.deviceUDID = this.opts.udid;
    this.defaultIME = await helpers.initDevice(this.adb, this.opts);
    await this.allocateSystemPort();
    await this.allocateMjpegServerPort();
    await this.initUiAutomator2Server();

    if (this.opts.disableWindowAnimation && (await this.adb.getApiLevel()) < 26) {
      if (await this.adb.isAnimationOn()) {
        _logger.default.info('Disabling animation via io.appium.settings');

        await this.adb.setAnimationState(false);
        this._wasWindowAnimationDisabled = true;
      } else {
        _logger.default.info('Window animation is already disabled');
      }
    }

    if (this.opts.autoLaunch) {
      await this.initAUT();
    }

    if (!this.caps.appPackage && appInfo) {
      this.caps.appPackage = appInfo.appPackage;
    }

    await this.uiautomator2.startSession(this.caps);
    await this.addDeviceInfoToCaps();

    if (!this.opts.skipUnlock) {
      await helpers.unlock(this, this.adb, this.caps);
    } else {
      _logger.default.debug(`'skipUnlock' capability set, so skipping device unlock`);
    }

    if (this.isChromeSession) {
      await this.startChromeSession(this);
    } else if (this.opts.autoLaunch && this.opts.appPackage) {
      await this.ensureAppStarts();
    }

    if (_appiumSupport.util.hasValue(this.opts.orientation)) {
      _logger.default.debug(`Setting initial orientation to '${this.opts.orientation}'`);

      await this.setOrientation(this.opts.orientation);
    }

    if (this.opts.autoWebview) {
      const viewName = this.defaultWebviewName();
      const timeout = this.opts.autoWebviewTimeout || 2000;

      _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

      await (0, _asyncbox.retryInterval)(timeout / 500, 500, this.setContext.bind(this), viewName);
    }

    this.jwpProxyActive = true;
  }

  async addDeviceInfoToCaps() {
    const {
      apiVersion,
      platformVersion,
      manufacturer,
      model,
      realDisplaySize,
      displayDensity
    } = await this.mobileGetDeviceInfo();
    this.caps.deviceApiLevel = parseInt(apiVersion, 10);
    this.caps.platformVersion = platformVersion;
    this.caps.deviceScreenSize = realDisplaySize;
    this.caps.deviceScreenDensity = displayDensity;
    this.caps.deviceModel = model;
    this.caps.deviceManufacturer = manufacturer;
  }

  async initUiAutomator2Server() {
    const uiautomator2Opts = {
      host: this.opts.remoteAdbHost || this.opts.host || '127.0.0.1',
      systemPort: this.opts.systemPort,
      devicePort: DEVICE_PORT,
      adb: this.adb,
      apk: this.opts.app,
      tmpDir: this.opts.tmpDir,
      appPackage: this.opts.appPackage,
      appActivity: this.opts.appActivity,
      disableWindowAnimation: !!this.opts.disableWindowAnimation,
      disableSuppressAccessibilityService: this.opts.disableSuppressAccessibilityService
    };
    this.uiautomator2 = new _uiautomator.UiAutomator2Server(uiautomator2Opts);
    this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);

    if (this.opts.skipServerInstallation) {
      _logger.default.info(`'skipServerInstallation' is set. Skipping UIAutomator2 server installation.`);
    } else {
      await this.uiautomator2.installServerApk(this.opts.uiautomator2ServerInstallTimeout);
    }
  }

  async initAUT() {
    if (this.opts.uninstallOtherPackages) {
      await helpers.uninstallOtherPackages(this.adb, helpers.parseArray(this.opts.uninstallOtherPackages), [_appiumAndroidDriver.SETTINGS_HELPER_PKG_ID, _uiautomator.SERVER_PACKAGE_ID, _uiautomator.SERVER_TEST_PACKAGE_ID]);
    }

    if (this.opts.otherApps) {
      let otherApps;

      try {
        otherApps = helpers.parseArray(this.opts.otherApps);
      } catch (e) {
        _logger.default.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
      }

      otherApps = await _bluebird.default.all(otherApps.map(app => this.helpers.configureApp(app, [APK_EXTENSION, APKS_EXTENSION])));
      await helpers.installOtherApks(otherApps, this.adb, this.opts);
    }

    if (this.opts.app) {
      if (!this.opts.noSign && !(await this.adb.checkApkCert(this.opts.app, this.opts.appPackage, {
        requireDefaultCert: false
      }))) {
        await helpers.signApp(this.adb, this.opts.app);
      }

      if (!this.opts.skipUninstall) {
        await this.adb.uninstallApk(this.opts.appPackage);
      }

      await helpers.installApk(this.adb, this.opts);
    } else {
      if (this.opts.fullReset) {
        _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
      }

      _logger.default.debug('No app capability. Assuming it is already on the device');

      if (this.opts.fastReset && this.opts.appPackage) {
        await helpers.resetApp(this.adb, this.opts);
      }
    }
  }

  async ensureAppStarts() {
    const appWaitPackage = this.opts.appWaitPackage || this.opts.appPackage;
    const appWaitActivity = this.opts.appWaitActivity || this.opts.appActivity;

    _logger.default.info(`Starting '${this.opts.appPackage}/${this.opts.appActivity} ` + `and waiting for '${appWaitPackage}/${appWaitActivity}'`);

    if (this.caps.androidCoverage) {
      _logger.default.info(`androidCoverage is configured. ` + ` Starting instrumentation of '${this.caps.androidCoverage}'...`);

      await this.adb.androidCoverage(this.caps.androidCoverage, appWaitPackage, appWaitActivity);
    } else {
      await this.adb.startApp({
        pkg: this.opts.appPackage,
        activity: this.opts.appActivity,
        action: this.opts.intentAction,
        category: this.opts.intentCategory,
        flags: this.opts.intentFlags,
        waitPkg: this.opts.appWaitPackage,
        waitActivity: this.opts.appWaitActivity,
        waitForLaunch: this.opts.appWaitForLaunch,
        waitDuration: this.opts.appWaitDuration,
        optionalIntentArguments: this.opts.optionalIntentArguments,
        stopApp: !this.opts.dontStopAppOnReset,
        retry: true,
        user: this.opts.userProfile
      });
    }
  }

  async deleteSession() {
    _logger.default.debug('Deleting UiAutomator2 session');

    await _appiumAndroidDriver.androidHelpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId);
    await this.mobileStopScreenStreaming();

    if (this.uiautomator2) {
      try {
        await this.stopChromedriverProxies();
      } catch (err) {
        _logger.default.warn(`Unable to stop ChromeDriver proxies: ${err.message}`);
      }

      if (this.jwpProxyActive) {
        try {
          await this.uiautomator2.deleteSession();
        } catch (err) {
          _logger.default.warn(`Unable to proxy deleteSession to UiAutomator2: ${err.message}`);
        }
      }

      this.uiautomator2 = null;
    }

    this.jwpProxyActive = false;

    if (this.adb) {
      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        _logger.default.debug(`Resetting IME to '${this.defaultIME}'`);

        try {
          await this.adb.setIME(this.defaultIME);
        } catch (err) {
          _logger.default.warn(`Unable to reset IME: ${err.message}`);
        }
      }

      if (this.caps.androidCoverage) {
        _logger.default.info('Shutting down the adb process of instrumentation...');

        await this.adb.endAndroidCoverage();

        if (this.caps.androidCoverageEndIntent) {
          _logger.default.info(`Sending intent broadcast '${this.caps.androidCoverageEndIntent}' at the end of instrumenting.`);

          await this.adb.broadcast(this.caps.androidCoverageEndIntent);
        } else {
          _logger.default.warn('No androidCoverageEndIntent is configured in caps. Possibly you cannot get coverage file.');
        }
      }

      if (this.opts.appPackage) {
        if (!this.isChromeSession && !this.opts.dontStopAppOnReset) {
          try {
            await this.adb.forceStop(this.opts.appPackage);
          } catch (err) {
            _logger.default.warn(`Unable to force stop app: ${err.message}`);
          }
        }

        if (this.opts.fullReset && !this.opts.skipUninstall) {
          _logger.default.debug(`Capability 'fullReset' set to 'true', Uninstalling '${this.opts.appPackage}'`);

          try {
            await this.adb.uninstallApk(this.opts.appPackage);
          } catch (err) {
            _logger.default.warn(`Unable to uninstall app: ${err.message}`);
          }
        }
      }

      if (this._wasWindowAnimationDisabled) {
        _logger.default.info('Restoring window animation state');

        await this.adb.setAnimationState(true);
      }

      await this.adb.stopLogcat();

      try {
        await this.releaseSystemPort();
      } catch (error) {
        _logger.default.warn(`Unable to remove system port forward: ${error.message}`);
      }

      try {
        await this.releaseMjpegServerPort();
      } catch (error) {
        _logger.default.warn(`Unable to remove MJPEG server port forward: ${error.message}`);
      }

      if ((await this.adb.getApiLevel()) >= 28) {
        _logger.default.info('Restoring hidden api policy to the device default configuration');

        await this.adb.setDefaultHiddenApiPolicy(!!this.opts.ignoreHiddenApiPolicyError);
      }

      if (this.opts.reboot) {
        let avdName = this.opts.avd.replace('@', '');

        _logger.default.debug(`Closing emulator '${avdName}'`);

        try {
          await this.adb.killEmulator(avdName);
        } catch (err) {
          _logger.default.warn(`Unable to close emulator: ${err.message}`);
        }
      }
    }

    if (this.mjpegStream) {
      _logger.default.info('Closing MJPEG stream');

      this.mjpegStream.stop();
    }

    await super.deleteSession();
  }

  async checkAppPresent() {
    _logger.default.debug('Checking whether app is actually present');

    if (!(await _appiumSupport.fs.exists(this.opts.app))) {
      _logger.default.errorAndThrow(`Could not find app apk at '${this.opts.app}'`);
    }
  }

  async onSettingsUpdate() {}

  async wrapBootstrapDisconnect(wrapped) {
    await wrapped();
    await this.adb.restart();
    await this.allocateSystemPort();
    await this.allocateMjpegServerPort();
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);

    if (_appiumSupport.util.hasValue(this.chromedriver)) {
      this.jwpProxyAvoid = CHROME_NO_PROXY;
    } else {
      this.jwpProxyAvoid = NO_PROXY;
    }

    if (this.opts.nativeWebScreenshot) {
      this.jwpProxyAvoid = [...this.jwpProxyAvoid, ['GET', new RegExp('^/session/[^/]+/screenshot')]];
    }

    return this.jwpProxyAvoid;
  }

  get isChromeSession() {
    return helpers.isChromeBrowser(this.opts.browserName);
  }

}

exports.AndroidUiautomator2Driver = AndroidUiautomator2Driver;

for (let [cmd, fn] of _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)) {
  AndroidUiautomator2Driver.prototype[cmd] = fn;
}

for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  AndroidUiautomator2Driver.prototype[cmd] = fn;
}

var _default = AndroidUiautomator2Driver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
